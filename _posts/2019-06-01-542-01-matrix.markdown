---
layout: post
title: "542: 01 Matrix"
categories: [leetcode]
date: "2019-06-01 17:19:50 -0700"
---

<p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.</p>

<p>The distance between two adjacent cells is 1.</p>

<p>&nbsp;</p>

<p><b>Example 1: </b></p>

<pre>
<strong>Input:</strong>
[[0,0,0],
 [0,1,0],
 [0,0,0]]

<strong>Output:</strong>
[[0,0,0],
&nbsp;[0,1,0],
&nbsp;[0,0,0]]
</pre>

<p><b>Example 2: </b></p>

<pre>
<b>Input:</b>
[[0,0,0],
 [0,1,0],
 [1,1,1]]

<strong>Output:</strong>
[[0,0,0],
 [0,1,0],
 [1,2,1]]
</pre>

<p>&nbsp;</p>

<p><b>Note:</b></p>

<ol>
	<li>The number of elements of the given matrix will not exceed 10,000.</li>
	<li>There are at least one 0 in the given matrix.</li>
	<li>The cells are adjacent in only four directions: up, down, left and right.</li>
</ol>

# Solutions

This is another problem that are better suitable for **BFS**.  We first set all the block with `1` to some very large number, and then gradually update its distance to the nearby `0`s.  Every time a block's distance to `0` is updated, we push this block back to queue because all its nearby blocks might needs to be updated as well.

```python
class Solution(object):
    def updateMatrix(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[List[int]]
        """

        q, m, n = collections.deque(), len(matrix), len(matrix[0])
        for i in xrange(m):
            for j in xrange(n):
                if matrix[i][j] != 0:
                    matrix[i][j] = 30000
                else:
                    q.append((i, j))

        while q:
            i,j = q.popleft()
            for i2, j2 in ((i, 1+j), (i, j-1), (i+1, j), (i-1, j)):
                d = matrix[i][j] + 1
                if 0 <= i2 < m and 0 <= j2 < n and matrix[i2][j2] > d:
                    matrix[i2][j2] = d
                    q.append((i2,j2))
        return matrix
```


