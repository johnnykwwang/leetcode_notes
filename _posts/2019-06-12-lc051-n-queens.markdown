---
layout: post
title: "051: N-Queens"
date: "2019-06-12 21:44:40 -0700"
categories: [leetcode]
---


<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>&times;<em>n</em> chessboard such that no two queens attack each other.</p>

<p><img alt="" src="https://assets.leetcode.com/uploads/2018/10/12/8-queens.png" style="width: 258px; height: 276px;" /></p>

<!--more-->

<p>Given an integer <em>n</em>, return all distinct solutions to the <em>n</em>-queens puzzle.</p>

<p>Each solution contains a distinct board configuration of the <em>n</em>-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space respectively.</p>

<p><strong>Example:</strong></p>

<pre>
<strong>Input:</strong> 4
<strong>Output:</strong> [
 [&quot;.Q..&quot;,  // Solution 1
  &quot;...Q&quot;,
  &quot;Q...&quot;,
  &quot;..Q.&quot;],

 [&quot;..Q.&quot;,  // Solution 2
  &quot;Q...&quot;,
  &quot;...Q&quot;,
  &quot;.Q..&quot;]
]
<strong>Explanation:</strong> There exist two distinct solutions to the 4-queens puzzle as shown above.
</pre>

# Solutions

This is a very classic hard DFS problem.  The approach is to "try" to put 1 queen, then for the remaining **safe** location, put the 2nd queen and so on.  Also, to prevent generating same solution, we can do it row-by-row.  For example, the first queen must be in row 1, and the second queen must be in row 2.  This way, we prevent such scenario where two traversal might output same board because the 2rd placed queen is another's 3rd placed queen.

Note that here we choose to label the n by n board using `0,1,2,3,...(n*n-1)`

```python
class Solution(object):
    def solveNQueens(self, n):
        """
        :type n: int
        :rtype: List[List[str]]
        """
        self.ans = []
        board = ["."] * (n*n)
        self.n = n
        self.dfs(board, [], set(range(n*n)), 0)

        # just parse it
        self.ans_parsed = []
        for board in self.ans:
            b_join = "".join(board)
            b_splitted = [ b_join[i*self.n:(i+1)*self.n] for i in range(self.n) ]
            self.ans_parsed.append(b_splitted)
        return self.ans_parsed

    def dfs(self, board, queens, legal_pos, row):
        if len(queens)==self.n:
            self.ans.append(board)
            return

        row_limit = set([  row*self.n + i for i in range(self.n) ])

        for i in legal_pos & row_limit:
            new_board = board[:]
            new_board[i] = 'Q'
            new_legal_pos = self.gen_legal_pos(legal_pos, i)
            self.dfs(new_board, queens+[i], new_legal_pos, row+1)

    def gen_legal_pos(self, legal_pos, q):
        n = self.n
        y,x = q//n, q%n
        horiz = set([ i*n+x for i in range(0,n) ])
        vert = set([  y*n+i for i in range(0,n) ])
        diag1 = set([ (y+i)*n+x+i for i in range(-n,n+1) if 0<=x+i<n and 0<=y+i<n ])
        diag2 = set([ (y-i)*n+x+i for i in range(-n,n+1) if 0<=x+i<n and 0<=y-i<n ])
        elim = horiz | vert | diag1 | diag2
        return legal_pos - elim
```
